name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  lint-and-format:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Lint Python code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check Python code formatting
      run: |
        black --check --diff .
        isort --check-only --diff .
        
    - name: Install Node.js dependencies
      run: |
        npm install -g eslint prettier
        
    - name: Lint JavaScript code
      run: |
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | xargs eslint --no-eslintrc --env browser,jquery --global frappe,cur_frm,persianDate || true
        
    - name: Check JavaScript formatting
      run: |
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | xargs prettier --check || true

  validate-structure:
    name: Validate App Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate required files
      run: |
        # Check for required files
        test -f pyproject.toml
        test -f persiandateerpnext/hooks.py
        test -f persiandateerpnext/__init__.py
        test -f persiandateerpnext/modules.txt
        test -f persiandateerpnext/patches.txt
        echo "‚úÖ Required files exist"
        
    - name: Validate hooks.py structure
      run: |
        python -c "
        import ast
        with open('persiandateerpnext/hooks.py') as f:
            tree = ast.parse(f.read())
        required_vars = ['app_name', 'app_title', 'app_publisher', 'app_description']
        for var in required_vars:
            assert any(isinstance(node, ast.Assign) and any(target.id == var for target in node.targets if hasattr(target, 'id')) for node in ast.walk(tree)), f'Missing {var}'
        print('‚úÖ hooks.py structure is valid')
        "
        
    - name: Validate JavaScript syntax
      run: |
        node -c persiandateerpnext/public/js/togregorian_date.js
        node -c persiandateerpnext/public/js/topersian_date.js
        node -c persiandateerpnext/public/js/in_words_cleanup.js
        echo "‚úÖ JavaScript syntax is valid"
        
    - name: Validate CSS syntax
      run: |
        npm install -g css-tree
        css-tree validate persiandateerpnext/public/css/custom.css
        echo "‚úÖ CSS syntax is valid"

  test-installation:
    name: Test Installation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install build
        python -m build
        pip install dist/*.whl
        echo "‚úÖ Package installation successful"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        python -m pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  compatibility-check:
    name: ERPNext Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check ERPNext version compatibility
      run: |
        # Check if hooks.py has required_apps or depends_on
        grep -q "required_apps\|depends_on" persiandateerpnext/hooks.py
        echo "‚úÖ ERPNext dependency declared"
        
    - name: Validate fixture structure
      run: |
        python -c "
        import json
        with open('persiandateerpnext/fixtures/custom_field.json') as f:
            fixtures = json.load(f)
        assert isinstance(fixtures, list), 'Fixtures must be a list'
        for fixture in fixtures:
            assert 'doctype' in fixture, 'Each fixture must have doctype'
            assert 'dt' in fixture, 'Each fixture must have dt field'
        print('‚úÖ Fixture structure is valid')
        "

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, validate-structure, test-installation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-dist
        path: dist/
        
    - name: Create deployment package
      run: |
        tar -czf persiandateerpnext-${{ github.sha }}.tar.gz \
          --exclude='.git*' \
          --exclude='dist' \
          --exclude='*.bak' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          persiandateerpnext/ \
          *.md \
          LICENSE \
          pyproject.toml \
          manifest.json
          
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: persiandateerpnext-${{ github.sha }}.tar.gz

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-package, security-scan, compatibility-check]
    if: github.event_name == 'release'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
        
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./persiandateerpnext-${{ github.sha }}.tar.gz
        asset_name: persiandateerpnext-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: success()
      run: |
        echo "üéâ Build and deployment successful!"
        echo "‚úÖ All checks passed"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Build or deployment failed!"
        echo "Please check the workflow logs for details"
